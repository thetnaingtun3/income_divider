import { Button, VerticalBox , LineEdit} from "std-widgets.slint";


component CalculateButton {
    Button {
               text: "Calculate"; 
               primary: true;
               height: 35px;
        }

}
export component AppWindow inherits Window {
    in property <string> result:""; 
    in-out property <bool> opencurtain;
    callback divide-income(string);
    GridLayout {
        padding: 50px;
        spacing: 25px;
        Row{
            Text {
              
                text: "Enter Total Income";
                horizontal-alignment: center;
                font-size: 24px;
                font-weight: 900;
                // color: red;
            }
        }
        Row{
          income:= LineEdit {
                horizontal-alignment: center;
                font-size: 16px;
                placeholder-text: "Enter text number";


            }
        }
        Row{
        Button {
               text: "Calculate"; 
               primary: true;
               height: 35px;
               clicked => {
                
                divide-income(income.text)}
        }


       }   
        Row{
        VerticalBox {
            Rectangle {
                height: 100px;
                background: #f2f2f2;
                Text {
                    color: black;
                    font-size: 16px;
                    font-weight: 500;
                    text:root.result;
                }
                // left rectangle
                Rectangle {
                    background: #333333;
                    x:0;
                    width: opencurtain ? 0px :parent.width / 2; 
                    height: parent.height;
                    animate width {
                        duration: 250ms ; easing: ease-in;
                    }

                }
                // Right rectangle

                Rectangle {
                    background: #333333;
                    x:opencurtain? parent.width : parent.width /2;
                    width: opencurtain ? 0px : parent.width /2;
                    height: parent.height ;
                    animate width {
                        duration: 250ms ; easing: ease-in;

                         
                    }
                    animate x {
                         duration:  250ms ; easing: ease-in;
                    }


                }
            }
        }
       }
    }
}
